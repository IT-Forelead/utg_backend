name: Pipeline

on:
  push:
    branches: [ "main" ]

env:
  AWS_ECR_REPOSITORY: "${{ vars.AWS_ACCOUNT_ID }}.dkr.ecr.${{ vars.AWS_REGION }}.amazonaws.com"
  S3_BUCKET: ${{ secrets.S3_BUCKET }}
  S3_BACKUP_PATH: warehouse/

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:latest
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: mydatabase
        options: >-
          --health-cmd "pg_isready -U postgres" 
          --health-interval 10s 
          --health-timeout 5s 
          --health-retries 5

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: "${{ vars.AWS_REGION }}"

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Download Java (temurin@11)
        id: download-java-temurin-11
        uses: typelevel/download-java@v1
        with:
          distribution: temurin
          java-version: 11

      - name: Setup Java (temurin@11)
        uses: actions/setup-java@v2
        with:
          distribution: jdkfile
          java-version: 11
          jdkFile: ${{ steps.download-java-temurin-11.outputs.jdkFile }}

      - name: Cache sbt
        uses: actions/cache@v2
        with:
          path: |
            ~/.sbt
            ~/.ivy2/cache
            ~/.coursier/cache/v1
            ~/.cache/coursier/v1
            ~/AppData/Local/Coursier/Cache/v1
            ~/Library/Caches/Coursier/v1
          key: ${{ runner.os }}-sbt-cache-v2-${{ hashFiles('**/*.sbt') }}-${{ hashFiles('project/build.properties') }}

      - name: Wait for PostgreSQL
        run: |
          until pg_isready -h 127.0.0.1 -p 5432 -U postgres; do
            echo "Waiting for PostgreSQL to be ready..."
            sleep 5
          done

      - name: Restore Database Backup
        run: |
          echo "Checking if PostgreSQL database backup exists in S3..."
          aws s3 cp s3://${{ env.S3_BUCKET }}/${{ env.S3_BACKUP_PATH }}backup.sql backup.sql || true
          docker exec -i $(docker ps -q -f "ancestor=postgres:latest") psql -U postgres -d mydatabase < backup.sql || true

      - name: Verify PostgreSQL Data
        run: |
          export PGPASSWORD=postgres
          psql -h 127.0.0.1 -p 5432 -U postgres -d mydatabase -W -c "SELECT COUNT(*) FROM regions;"

      - name: Run Flyway migrations
        run: sbt flywayMigrate

      - name: Verify PostgreSQL Data
        run: |
          export PGPASSWORD=postgres
          psql -h 127.0.0.1 -p 5432 -U postgres -d mydatabase -W -c "SELECT COUNT(*) FROM regions;"

      - name: Create Database Backup
        run: |
          echo "Creating PostgreSQL database backup..."
          docker exec -t $(docker ps -q -f "ancestor=postgres:latest") pg_dump -U postgres mydatabase > backup.sql

      - name: Upload Database Backup to S3
        run: |
          echo "Uploading PostgreSQL database backup to S3..."
          aws s3 cp backup.sql s3://${{ env.S3_BUCKET }}/${{ env.S3_BACKUP_PATH }}backup.sql

      - name: "Building base image üèó"
        run: |
          cd .build
          bash base.sh
      - name: "Building image üèó"
        id: build-image
        run: |
          export CI_SHORT_COMMIT_ID=$(echo "$GITHUB_SHA" | cut -c1-8)
          echo "::set-output name=tag::$CI_SHORT_COMMIT_ID"
          sbt docker:publish
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: "Building image üèó"
        id: set-image-tag
        run: |
          export CI_SHORT_COMMIT_ID=$(echo "$GITHUB_SHA" | cut -c1-8)
          echo "::set-output name=tag::$CI_SHORT_COMMIT_ID"
      - name: Install SSH key of timeweb
        uses: appleboy/ssh-action@master
        env:
          IMAGE_TAG: ${{ steps.set-image-tag.outputs.tag }}
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd utg
            aws ecr get-login-password --region ${{ vars.AWS_REGION }} | docker login --username AWS --password-stdin ${{ env.AWS_ECR_REPOSITORY }}
            export IMAGE_TAG=${{ env.IMAGE_TAG }}
            bash run
            docker restart nginx